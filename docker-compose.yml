version: '3.8'

services:
  # JSON Server
  json-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: json-server-container
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - app-network

  # Kafka
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    restart: unless-stopped
    networks:
      - app-network
    hostname: kafka
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_KRAFT_CLUSTER_ID=5L6g3nShT-eMCtK--X86sw
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    healthcheck:
      test: kafka-topics.sh --bootstrap-server kafka:9092 --list
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # MySQL
  mysql:
    image: mysql:8.0
    container_name: mysql-container
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: log_monitoring
      MYSQL_ROOT_HOST: '%' 
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data_new:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ppassword"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus-container
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - app-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Producer
  producer:
    build:
      context: .
      dockerfile: Dockerfile.producer
    container_name: producer-container
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    environment:
      KAFKA_BROKER: "kafka:9092"

  # Consumer
  consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    container_name: consumer-container
    ports:
      - "8000:8000"
    depends_on:
      kafka:
        condition: service_healthy
      mysql:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    environment:
      KAFKA_BROKER: "kafka:9092"
      MYSQL_HOST: "mysql"
      MYSQL_PORT: "3306"
      MYSQL_USER: "root"
      MYSQL_PASSWORD: "password"
      MYSQL_DATABASE: "log_monitoring"
    healthcheck:
      test: curl -f http://localhost:8000/metrics || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Simulate Requests
  simulate-requests:
    build:
      context: .
      dockerfile: Dockerfile.simulate
    container_name: simulate-requests-container
    depends_on:
      - json-server
      - producer
      - kafka
    restart: unless-stopped
    networks:
      - app-network
    environment:
      KAFKA_BROKER: "kafka:9092"
      API_URL: "http://json-server:3000/orders"
  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-container
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - app-network
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
      - mysql

networks:
  app-network:
    driver: bridge

volumes:
  mysql_data_new:
  prometheus_data:
  grafana_data:
